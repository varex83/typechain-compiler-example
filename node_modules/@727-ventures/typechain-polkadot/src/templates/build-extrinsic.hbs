/* This file is auto-generated */

import type { ContractPromise } from '@polkadot/api-contract';
import type { GasLimit, GasLimitAndRequiredValue } from '@727-ventures/typechain-types';
import { buildSubmittableExtrinsic } from '@727-ventures/typechain-types';
import type * as ArgumentTypes from '../types-arguments/{{{fileName}}}';
import type BN from 'bn.js';
import type { ApiPromise } from '@polkadot/api';

{{#if additionalImports.length}}
{{#each additionalImports}}
import { {{#each values}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}} } from '{{{path}}}';
{{/each}}{{/if}}

export default class Methods {
	private __nativeContract : ContractPromise;
	private __apiPromise: ApiPromise;

	constructor(
		nativeContract : ContractPromise,
		apiPromise: ApiPromise,
	) {
		this.__nativeContract = nativeContract;
		this.__apiPromise = apiPromise;
	}
{{#each methods}}
	/**
	 * {{{toCamelCase name}}}
	 *
	 {{#each args}}
	 * @param { {{{type.tsStr}}} } {{{toCamelCase name}}},
	 {{/each}}
	*/
	"{{{toCamelCase name}}}" (
	{{#each args}}
		{{{name}}}: {{{type.tsStr}}},
	{{/each}}
		__options: {{#if payable}}GasLimitAndRequiredValue{{else}}GasLimit{{/if}},
	){{{buildReturnType this}}}{
		return {{{buildReturn this}}} "{{{toCamelCaseForFunctions originalName}}}", [{{#each args}}{{{name}}}{{#unless @last}}, {{/unless}}{{/each}}], __options);
	}

{{/each}}
}